###### Macros ###################
- macro: never_true
  condition: sf.opflags = ""

- macro: always_true
  condition: sf.opflags != ""

- macro: sed_write
  condition: (sf.proc.name = sed and sf.proc.args contains '-i' and sf.file.is_open_write = true)

- macro: overwrite
  condition: sf.opflags = RENAME
 
- macro: open_write
  condition: sf.type=FF and sf.opflags = OPEN and sf.file.is_open_write = true
  
- macro: open_read
  condition: sf.file.is_open_read = true or sf.opflags = READ
  
- macro: interactive
  condition: >
    ((sf.pproc.name = sshd and sf.proc.name != sshd) or
    sf.proc.name = systemd-logind or sf.proc.name = login or sf.proc.tty = true)

- macro: user_ssh_directory
  condition: (sf.file.path startswith '/home' and sf.file.path contains '.ssh')

- macro: system_dir
  condition: >
    (sf.file.directory in (system_directories)
     or user_ssh_directory)
     
- macro: init_dir
  condition: >
    (sf.file.directory in (init_directories))

- macro: scheduler_dir
  condition: >
    (sf.file.directory in (scheduler_directories))

- macro: known_root_conditions
  condition: (sf.file.path startswith /root/orcexec.
              or sf.file.path startswith /root/.m2
              or sf.file.path startswith /root/.npm
              or sf.file.path startswith /root/.pki
              or sf.file.path startswith /root/.ivy2
              or sf.file.path startswith /root/.config/Cypress
              or sf.file.path startswith /root/.config/pulse
              or sf.file.path startswith /root/.config/configstore
              or sf.file.path startswith /root/jenkins/workspace
              or sf.file.path startswith /root/.jenkins
              or sf.file.path startswith /root/.cache
              or sf.file.path startswith /root/.sbt
              or sf.file.path startswith /root/.java
              or sf.file.path startswith /root/.glide
              or sf.file.path startswith /root/.sonar
              or sf.file.path startswith /root/.v8flag
              or sf.file.path startswith /root/infaagent
              or sf.file.path startswith /root/.local/lib/python
              or sf.file.path startswith /root/.pm2
              or sf.file.path startswith /root/.gnupg
              or sf.file.path startswith /root/.pgpass
              or sf.file.path startswith /root/.theano
              or sf.file.path startswith /root/.gradle
              or sf.file.path startswith /root/.android
              or sf.file.path startswith /root/.ansible
              or sf.file.path startswith /root/.crashlytics
              or sf.file.path startswith /root/.dbus
              or sf.file.path startswith /root/.composer
              or sf.file.path startswith /root/.gconf
              or sf.file.path startswith /root/.nv
              or sf.file.path startswith /root/.local/share/jupyter
              or sf.file.path startswith /root/oradiag_root
              or sf.file.path startswith /root/workspace
              or sf.file.path startswith /root/jvm
              or sf.file.path startswith /root/.node-gyp)

- macro: rename
  condition: sf.opflags = RENAME

- macro: mkdir
  condition: sf.opflags = MKDIR

- macro: remove
  condition: sf.opflags in (RMDIR, UNLINK)

- macro: modify
  condition: rename or remove

- macro: bin_dir
  condition: (sf.file.directory startswith /bin or 
             sf.file.directory startswith /sbin or
             sf.file.directory startswith /usr/bin or
             sf.file.directory startswith /usr/sbin or
             sf.file.directory startswith /usr/local/bin or
             sf.file.directory startswith /usr/local/sbin)

- macro: etc_dir
  condition: sf.file.path startswith /etc/

- macro: root_dir
  condition: (sf.file.directory=/ or sf.file.path startswith /root/)
 
- macro: sensitive_files
  condition: (sf.file.path startswith /etc/ and
              sf.file.path in (sys_password_files))

- macro: ssh_port
  condition: sf.net.sport=22
 
- macro: running_shell_command
  condition: sf.proc.cmdline startswith "sh -c"

- macro: consider_shell_config_reads
  condition: (never_true)

- macro: consider_all_cron_jobs
  condition: (never_true)

- macro: user_known_cron_jobs
  condition: (never_true)

- macro: parent_linux_image_upgrade_script
  condition: sf.pproc.name startswith linux-image-

- macro: parent_node_running_npm
  condition: (sf.pproc.cmdline startswith "node /usr/local/bin/npm" or
              sf.pproc.cmdline startswith "node /usr/local/nodejs/bin/npm" or
              sf.pproc.cmdline startswith "node /opt/rh/rh-nodejs6/root/usr/bin/npm")

- macro: java_package_installer
  condition: (sf.proc.name=java and sf.proc.cmdline contains sbt-launch.jar) or (sf.proc.name=mvn)

- macro: ansible_running_python
  condition: (sf.proc.name in (python, pypy) and sf.proc.cmdline contains ansible)

- macro: python_running_chef
  condition: (sf.proc.name=python and (sf.proc.cmdline contains yum-dump.py or sf.proc.cmdline="python /usr/bin/chef-monitor.py"))

- macro: python_running_get_pip
  condition: (sf.proc.cmdline startswith "python get-pip.py")

- macro: parent_java_running_zookeeper
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.apache.zookeeper.server)

- macro: parent_java_running_kafka
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains kafka.Kafka)

- macro: parent_java_running_elasticsearch
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.elasticsearch.bootstrap.Elasticsearch)

- macro: parent_java_running_activemq
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains activemq.jar)

- macro: parent_java_running_cassandra
  condition: (sf.pproc.name=java and (sf.proc.cmdline contains "-Dcassandra.config.loader" or sf.pproc.cmdline contains org.apache.cassandra.service.CassandraDaemon))

- macro: parent_java_running_jboss_wildfly
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.jboss)

- macro: parent_java_running_glassfish
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains com.sun.enterprise.glassfish)

- macro: parent_java_running_hadoop
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.apache.hadoop)

- macro: parent_java_running_datastax
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains com.datastax)

- macro: nginx_starting_nginx
  condition: (sf.pproc.name=nginx and sf.proc.cmdline contains "/usr/sbin/nginx -c /etc/nginx/nginx.conf")

- macro: nginx_running_aws_s3_cp
  condition: (sf.pproc.name=nginx and sf.proc.cmdline startswith "sh -c /usr/local/bin/aws s3 cp")

- macro: consul_running_net_scripts
  condition: (sf.pproc.name=consul and (sf.proc.cmdline startswith "sh -c curl" or sf.proc.cmdline startswith "sh -c nc"))

- macro: consul_running_alert_checks
  condition: (sf.pproc.name=consul and sf.proc.cmdline startswith "sh -c /bin/consul-alerts")

- macro: serf_script
  condition: (sf.proc.cmdline startswith "sh -c serf")

- macro: check_process_status
  condition: (sf.proc.cmdline startswith "sh -c kill -0 ")

- macro: possibly_parent_java_running_tomcat
  condition: (sf.pproc.name contains java and sf.pproc.cmdline contains org.apache.catalina.startup.Bootstrap)

- macro: protected_shell_spawner
  condition: >
    (sf.proc.aname in (protected_shell_spawning_binaries)
    or parent_java_running_zookeeper
    or parent_java_running_kafka
    or parent_java_running_elasticsearch
    or parent_java_running_activemq
    or parent_java_running_cassandra
    or parent_java_running_jboss_wildfly
    or parent_java_running_glassfish
    or parent_java_running_hadoop
    or parent_java_running_datastax
    or possibly_parent_java_running_tomcat)

- macro: nrpe_becoming_nagios
  condition: (sf.proc.name=nrpe and sf.proc.user=nagios)

- macro: container
  condition: (sf.container exists and sf.container.type != host)

- macro: known_user_in_container
  condition: (container and sf.proc.user != "")

- macro: system_procs
  condition: sf.proc.name in (coreutils_binaries, user_mgmt_binaries)

- macro: login_doing_dns_lookup
  condition: (sf.proc.name=login and sf.net.proto=udp and sf.net.sport=53)

- macro: possibly_webserver
  condition: (sf.proc.name pmatch (http_server_binaries) 
              or possibly_parent_java_running_tomcat)

- macro: privileged_execution
  condition: sf.proc.exe in (privileged_processes)

- macro: auth_execution
  condition: sf.proc.exe in (auth_processes)

- macro: parent_sudo
  condition: sf.pproc.exe = /usr/bin/sudo

### add macros

- macro: proc_name_exists
  condition: (sf.proc.name!="")

- macro: spawned_process
  condition: sf.opflags = EXEC

- macro: chmod_syscall
  condition: FileEvent and sf.opflags = CHMOD

- macro: bin_dir_mkdir
  condition: >
     (sf.file.path startswith /bin/ or
     sf.file.path startswith /sbin/ or
     sf.file.path startswith /usr/bin/ or
     sf.file.path startswith /usr/sbin/ or
     sf.file.path startswith /usr/local/bin/ or
     sf.file.path startswith /usr/local/sbin/) and (mkdir_syscall)

- macro: bin_dir_rename
  condition: >
     (sf.file.path startswith /bin/ or
     sf.file.path startswith /sbin/ or
     sf.file.path startswith /usr/bin/ or
     sf.file.path startswith /usr/sbin/ or
     sf.file.path startswith /usr/local/bin/ or
     sf.file.path startswith /usr/local/sbin/) and (rename_syscall)

- macro: shell_procs
  condition: sf.proc.name in (shell_binaries)

- macro: interpreted_procs
  condition: >
    (sf.proc.name in (interpreted_binaries))

- macro: server_procs
  condition: sf.proc.name in (http_server_binaries, db_server_binaries, docker_binaries, sshd)

- macro: rpm_procs
  condition: (sf.proc.name in (rpm_binaries, openscap_rpm_binaries) or sf.proc.name in (salt-minion))

- macro: package_mgmt_procs
  condition: sf.proc.name in (package_mgmt_binaries)

- macro: package_mgmt_ancestor_procs
  condition: >
    (sf.pproc.name in (package_mgmt_binaries) or
     sf.proc.aname[2] in (package_mgmt_binaries) or
     sf.proc.aname[3] in (package_mgmt_binaries) or
     sf.proc.aname[4] in (package_mgmt_binaries))

- macro: coreos_write_ssh_dir
  condition: (sf.proc.name=update-ssh-keys and sf.file.directory startswith /home/core/.ssh)

- macro: run_by_package_mgmt_binaries
  condition: sf.proc.aname in (package_mgmt_binaries, needrestart)

- macro: system_procs
  condition: sf.proc.name in (coreutils_binaries, user_mgmt_binaries)

- macro: sensitive_files
  condition: >
    sf.file.directory startswith /etc and
    (sf.file.directory in (sensitive_file_names)
     or sf.file.directory in (/etc/sudoers.d, /etc/pam.d))

- macro: proc_is_new
  condition: sf.opflags contains CLONE

- macro: inbound
  condition: >
    ((sf.opflags = ACCEPT or (sf.opflags = RECV and sf.net exists and sf.net.proto != 6)) and
     (sf.net exists and sf.net.dip in ("0.0.0.0", "127.0.0.0/8") and sf.net.sip in ("0.0.0.0", "127.0.0.0/8")))

- macro: outbound
  condition: >
    ((sf.opflags = CONNECT or
      (sf.opflags = SEND and sf.net exists and sf.net.proto != 6)) and
     (sf.net exists and sf.net.dip in ("0.0.0.0", "127.0.0.0/8") and sf.net.sip in ("0.0.0.0", "127.0.0.0/8") and 
     not sf.net.sip in (rfc_1918_addresses)))

- macro: inbound_outbound
  condition: >
    ((sf.opflags in (ACCEPT,CONNECT)) and
     (sf.net exists and sf.net.sip != "0.0.0.0" and sf.net.dip != "0.0.0.0")

- macro: ssh_port
  condition: sf.net.sport=22

- macro: allowed_ssh_hosts
  condition: sf.net.sip in ("0.0.0.0", "10.176.22.103")

- macro: container_started
  condition: >
    (sf.proc.name = docker and sf.proc.args startswith run)

- macro: interactive
  condition: >
    ((sf.proc.aname=sshd and sf.proc.name != sshd) or
    sf.proc.name=systemd-logind or sf.proc.name=login)

- macro: system_users
  condition: sf.proc.user in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data)

- macro: httpd_writing_ssl_conf
  condition: >
    (sf.pproc.name=run-httpd and
     (sf.proc.cmdline contains "sed -ri" or sf.proc.cmdline contains "sed -i") and
     (sf.file.path startswith /etc/httpd/conf.d/ or sf.file.path startswith /etc/httpd/conf))

- macro: userhelper_writing_etc_security
  condition: (sf.proc.name=userhelper and sf.file.path startswith /etc/security)

- macro: ansible_running_python
  condition: (sf.proc.name in (python, pypy, python3) and sf.proc.cmdline contains ansible)

- macro: python_running_chef
  condition: (sf.proc.name=python and (sf.proc.cmdline contains yum-dump.py or sf.proc.cmdline="python /usr/bin/chef-monitor.py"))

- macro: python_running_denyhosts
  condition: >
    (sf.proc.name=python and
    (sf.proc.cmdline contains /usr/sbin/denyhosts or
     sf.proc.cmdline contains /usr/local/bin/denyhosts.py))

- macro: run_by_qualys
  condition: >
    (sf.pproc.name=qualys-cloud-ag or
     sf.proc.aname[2]=qualys-cloud-ag or
     sf.proc.aname[3]=qualys-cloud-ag or
     sf.proc.aname[4]=qualys-cloud-ag)

- macro: run_by_sumologic_securefiles
  condition: >
    ((sf.proc.cmdline="usermod -a -G sumologic_collector" or
      sf.proc.cmdline="groupadd sumologic_collector") and
     (sf.pproc.name=secureFiles.sh and sf.proc.aname[2]=java))

- macro: run_by_yum
  condition: ((sf.pproc.name=sh and sf.proc.aname[2]=yum) or
              (sf.proc.aname[2]=sh and sf.proc.aname[3]=yum))

- macro: run_by_ms_oms
  condition: >
    (sf.proc.aname[3] startswith omsagent- or
     sf.proc.aname[3] startswith scx-)

- macro: run_by_google_accounts_daemon
  condition: >
    (sf.proc.aname[1] startswith google_accounts or
     sf.proc.aname[2] startswith google_accounts or
     sf.proc.aname[3] startswith google_accounts)

- macro: run_by_chef
  condition: (sf.proc.aname[2]=chef_command_wr or sf.proc.aname[3]=chef_command_wr or
              sf.proc.aname[2]=chef-client or sf.proc.aname[3]=chef-client or
              sf.proc.name=chef-client)

- macro: run_by_adclient
  condition: (sf.proc.aname[2]=adclient or sf.proc.aname[3]=adclient or sf.proc.aname[4]=adclient)

- macro: run_by_centrify
  condition: (sf.proc.aname[2]=centrify or sf.proc.aname[3]=centrify or sf.proc.aname[4]=centrify)

- macro: run_by_foreman
  condition: >
    (sf.proc.user=foreman and
     ((sf.pproc.name in (rake, ruby, scl) and sf.proc.aname[5] in (tfm-rake,tfm-ruby)) or
     (sf.pproc.name=scl and sf.proc.aname[2] in (tfm-rake,tfm-ruby))))

- macro: java_running_sdjagent
  condition: sf.proc.name=java and sf.proc.cmdline contains sdjagent.jar

- macro: kubelet_running_loopback
  condition: (sf.pproc.name=kubelet and sf.proc.name=loopback)

- macro: python_mesos_marathon_scripting
  condition: (sf.pproc.cmdline startswith "python3 /marathon-lb/marathon_lb.py")

- macro: splunk_running_forwarder
  condition: (sf.pproc.name=splunkd and sf.proc.cmdline startswith "sh -c /opt/splunkforwarder")

- macro: parent_supervise_running_multilog
  condition: (sf.proc.name=multilog and sf.pproc.name=supervise)

- macro: supervise_writing_status
  condition: (sf.proc.name in (supervise,svc) and sf.file.path startswith "/etc/sb/")

- macro: pki_realm_writing_realms
  condition: (sf.proc.cmdline startswith "bash /usr/local/lib/pki/pki-realm" and sf.file.path startswith /etc/pki/realms)

- macro: htpasswd_writing_passwd
  condition: (sf.proc.name=htpasswd and sf.file.path=/etc/nginx/.htpasswd)

- macro: lvprogs_writing_conf
  condition: >
    (sf.proc.name in (dmeventd,lvcreate,pvscan,lvs) and
     (sf.file.path startswith /etc/lvm/archive or
      sf.file.path startswith /etc/lvm/backup or
      sf.file.path startswith /etc/lvm/cache))

- macro: ovsdb_writing_openvswitch
  condition: (sf.proc.name=ovsdb-server and sf.file.directory=/etc/openvswitch)

- macro: perl_running_plesk
  condition: (sf.proc.cmdline startswith "perl /opt/psa/admin/bin/plesk_agent_manager" or
              sf.pproc.cmdline startswith "perl /opt/psa/admin/bin/plesk_agent_manager")

- macro: perl_running_updmap
  condition: (sf.proc.cmdline startswith "perl /usr/bin/updmap")

- macro: perl_running_centrifydc
  condition: (sf.proc.cmdline startswith "perl /usr/share/centrifydc")

- macro: runuser_reading_pam
  condition: (sf.proc.name=runuser and sf.file.directory=/etc/pam.d)

- macro: linux_bench_reading_etc_shadow
  condition: ((sf.proc.aname[2]=linux-bench and
               sf.proc.name in (awk,cut,grep)) and
              (sf.file.path=/etc/shadow or
               sf.file.directory=/etc/pam.d))

- macro: parent_ucf_writing_conf
  condition: (sf.pproc.name=ucf and sf.proc.aname[2]=frontend)

- macro: consul_template_writing_conf
  condition: >
    ((sf.proc.name=consul-template and sf.file.path startswith /etc/haproxy) or
     (sf.proc.name=reload.sh and sf.proc.aname[2]=consul-template and sf.file.path startswith /etc/ssl))

- macro: countly_writing_nginx_conf
  condition: (sf.proc.cmdline startswith "nodejs /opt/countly/bin" and sf.file.path startswith /etc/nginx)

- macro: ms_oms_writing_conf
  condition: >
    ((sf.proc.name in (omiagent,omsagent,in_heartbeat_r*,omsadmin.sh,PerformInventor,dsc_host)
       or sf.pproc.name in (ms_oms_binaries)
       or sf.proc.aname[2] in (ms_oms_binaries))
     and (sf.file.path startswith /etc/opt/omi or sf.file.path startswith /etc/opt/microsoft/omsagent))

- macro: ms_scx_writing_conf
  condition: (sf.proc.name in (GetLinuxOS.sh) and sf.file.path startswith /etc/opt/microsoft/scx)

- macro: azure_scripts_writing_conf
  condition: (sf.pproc.name startswith "bash /var/lib/waagent/" and sf.file.path startswith /etc/azure)

- macro: azure_networkwatcher_writing_conf
  condition: (sf.proc.name in (NetworkWatcherA) and sf.file.path=/etc/init.d/AzureNetworkWatcherAgent)

- macro: couchdb_writing_conf
  condition: (sf.proc.name=beam.smp and sf.proc.cmdline contains couchdb and sf.file.path startswith /etc/couchdb)

- macro: update_texmf_writing_conf
  condition: (sf.proc.name=update-texmf and sf.file.path startswith /etc/texmf)

- macro: slapadd_writing_conf
  condition: (sf.proc.name=slapadd and sf.file.path startswith /etc/ldap)

- macro: openldap_writing_conf
  condition: (sf.pproc.name=run-openldap.sh and sf.file.path startswith /etc/openldap)

- macro: ucpagent_writing_conf
  condition: (sf.proc.name=apiserver and sf.container.image contains docker/ucp-agent and sf.file.path=/etc/authorization_config.cfg)

- macro: iscsi_writing_conf
  condition: (sf.proc.name=iscsiadm and sf.file.path startswith /etc/iscsi)

- macro: istio_writing_conf
  condition: (sf.proc.name=pilot-agent and sf.file.path startswith /etc/istio)

- macro: symantec_writing_conf
  condition: >
    ((sf.proc.name=symcfgd and sf.file.path startswith /etc/symantec) or
     (sf.proc.name=navdefutil and sf.file.path=/etc/symc-defutils.conf))

- macro: liveupdate_writing_conf
  condition: (sf.proc.cmdline startswith "java LiveUpdate" and sf.file.path in (/etc/liveupdate.conf, /etc/Product.Catalog.JavaLiveUpdate))

- macro: rancher_agent
  condition: (sf.proc.name=agent and sf.container.image contains "rancher/agent")

- macro: rancher_network_manager
  condition: (sf.proc.name=rancher-bridge and sf.container.image contains "rancher/network-manager")

- macro: sosreport_writing_files
  condition: >
    (sf.proc.name=urlgrabber-ext- and sf.proc.aname[3]=sosreport and
     (sf.file.path startswith /etc/pkt/nssdb or sf.file.path startswith /etc/pki/nssdb))

- macro: pkgmgmt_progs_writing_pki
  condition: >
    (sf.proc.name=urlgrabber-ext- and sf.pproc.name in (yum, yum-cron, repoquery) and
     (sf.file.path startswith /etc/pkt/nssdb or sf.file.path startswith /etc/pki/nssdb))

- macro: update_ca_trust_writing_pki
  condition: (sf.pproc.name=update-ca-trust and sf.proc.name=trust and sf.file.path startswith /etc/pki)

- macro: brandbot_writing_os_release
  condition: sf.proc.name=brandbot and sf.file.path=/etc/os-release

- macro: selinux_writing_conf
  condition: (sf.proc.name in (semodule,genhomedircon,sefcontext_comp) and sf.file.path startswith /etc/selinux)

- macro: veritas_driver_script
  condition: (sf.proc.cmdline startswith "perl /opt/VRTSsfmh/bin/mh_driver.pl")

- macro: veritas_progs
  condition: (sf.proc.name in (veritas_binaries) or veritas_driver_script)

- macro: veritas_writing_config
  condition: (veritas_progs and (sf.file.path startswith /etc/vx or sf.file.path startswith /etc/opt/VRTS or sf.file.path startswith /etc/vom))

- macro: nginx_writing_conf
  condition: (sf.proc.name in (nginx,nginx-ingress-c,nginx-ingress) and (sf.file.path startswith /etc/nginx or sf.file.path startswith /etc/ingress-controller))

- macro: nginx_writing_certs
  condition: >
    (((sf.proc.name=openssl and sf.pproc.name=nginx-launch.sh) or sf.proc.name=nginx-launch.sh) and sf.file.path startswith /etc/nginx/certs)

- macro: chef_client_writing_conf
  condition: (sf.pproc.cmdline startswith "chef-client /opt/gitlab" and sf.file.path startswith /etc/gitlab)

- macro: centrify_writing_krb
  condition: (sf.proc.name in (adjoin,addns) and sf.file.path startswith /etc/krb5)

- macro: sssd_writing_krb
  condition: (sf.proc.name=adcli and proc.aname[2]=sssd and sf.file.path startswith /etc/krb5)

- macro: cockpit_writing_conf
  condition: >
    ((sf.pproc.name=cockpit-kube-la or sf.proc.aname[2]=cockpit-kube-la)
     and sf.file.path startswith /etc/cockpit)

- macro: ipsec_writing_conf
  condition: (sf.proc.name=start-ipsec.sh and sf.file.directory=/etc/ipsec)

- macro: exe_running_docker_save
  condition: >
    sf.proc.name = "exe"
    and (sf.proc.cmdline contains "/var/lib/docker"
    or sf.proc.cmdline contains "/var/run/docker")
    and sf.pproc.name in (dockerd, docker, dockerd-current, docker-current)

- macro: sed_temporary_file
  condition: (sf.proc.name=sed and sf.file.path startswith "/etc/sed")

- macro: python_running_get_pip
  condition: (sf.proc.cmdline startswith "python get-pip.py")

- macro: python_running_ms_oms
  condition: (sf.proc.cmdline startswith "python /var/lib/waagent/")

- macro: gugent_writing_guestagent_log
  condition: (sf.proc.name=gugent and sf.file.name=GuestAgent.log)

- macro: dse_writing_tmp
  condition: (sf.proc.name=dse-entrypoint and sf.file.path=/root/tmp__)

- macro: zap_writing_state
  condition: (sf.proc.name=java and proc.cmdline contains "jar /zap" and sf.file.path startswith /root/.ZAP)

- macro: airflow_writing_state
  condition: (sf.proc.name=airflow and sf.file.path startswith /root/airflow)

- macro: rpm_writing_root_rpmdb
  condition: (sf.proc.name=rpm and sf.file.directory=/root/.rpmdb)

- macro: maven_writing_groovy
  condition: (sf.proc.name=java and sf.proc.cmdline contains "classpath /usr/local/apache-maven" and sf.file.path startswith /root/.groovy)

- macro: chef_writing_conf
  condition: (sf.proc.name=chef-client and sf.file.path startswith /root/.chef)

- macro: kubectl_writing_state
  condition: (sf.proc.name in (kubectl,oc) and sf.file.path startswith /root/.kube)

- macro: java_running_cassandra
  condition: (sf.proc.name=java and sf.proc.cmdline contains "cassandra.jar")

- macro: cassandra_writing_state
  condition: (java_running_cassandra and sf.file.directory=/root/.cassandra)

- macro: galley_writing_state
  condition: (sf.proc.name=galley and sf.file.path in (known_istio_files))

- macro: calico_writing_envvars
  condition: (sf.proc.name=start_runit and sf.file.path startswith "/etc/envvars" and sf.container.image contains "calico/node")

- macro: access_repositories
  condition: (sf.file.directory in (repository_directories) or
              (sf.file.path pmatch (repository_directories) and
               sf.file.name in (repository_files)))

- macro: modify_repositories
  condition: (sf.file.newpath pmatch (repository_directories))

- macro: user_known_update_package_registry
  condition: (never_true)

- macro: user_known_write_below_binary_dir_activities
  condition: (never_true)

- macro: user_ssh_directory
  # condition: (sf.file.name glob '/home/*/.ssh/*')
  condition: (sf.file.path startswith '/home/') and (sf.file.path contains '/.ssh/')

- macro: google_accounts_daemon_writing_ssh
  condition: (sf.proc.name=google_accounts and user_ssh_directory)

- macro: cloud_init_writing_ssh
  condition: (sf.proc.name=cloud-init and user_ssh_directory)

- macro: mkinitramfs_writing_boot
  condition: (sf.pproc.name in (mkinitramfs, update-initramf) and sf.file.directory=/boot)

- macro: monitored_dir
  condition: >
    (sf.file.directory in (monitored_directories)
     or user_ssh_directory)
    and not mkinitramfs_writing_boot

- macro: user_known_write_monitored_dir_conditions
  condition: (never_true)

- macro: consider_ssh_reads
  condition: (never_true)

- macro: user_known_read_ssh_information_activities
  condition: (never_true)

- macro: fluentd_writing_conf_files
  condition: (sf.proc.name=start-fluentd and sf.file.path in (/etc/fluent/fluent.conf, /etc/td-agent/td-agent.conf))

- macro: qualys_writing_conf_files
  condition: (sf.proc.name=qualys-cloud-ag and sf.file.path=/etc/qualys/cloud-agent/qagent-log.conf)

- macro: git_writing_nssdb
  condition: (sf.proc.name=git-remote-http and sf.file.directory=/etc/pki/nssdb)

- macro: plesk_writing_keys
  condition: (sf.proc.name in (plesk_binaries) and sf.file.path startswith /etc/sw/keys)

- macro: plesk_install_writing_apache_conf
  condition: (sf.proc.cmdline startswith "bash -hB /usr/lib/plesk-9.0/services/webserver.apache configure"
              and sf.file.path="/etc/apache2/apache2.conf.tmp")

- macro: plesk_running_mktemp
  condition: (sf.proc.name=mktemp and sf.proc.aname[3] in (plesk_binaries))

- macro: networkmanager_writing_resolv_conf
  condition: sf.proc.aname[2]=nm-dispatcher and sf.file.path=/etc/resolv.conf

- macro: add_shell_writing_shells_tmp
  condition: (sf.proc.name=add-shell and sf.file.path=/etc/shells.tmp)

- macro: duply_writing_exclude_files
  condition: (sf.proc.name=touch and sf.pproc.cmdline startswith "bash /usr/bin/duply" and sf.file.path startswith "/etc/duply")

- macro: xmlcatalog_writing_files
  condition: (sf.proc.name=update-xmlcatal and sf.file.directory=/etc/xml)

- macro: datadog_writing_conf
  condition: ((sf.proc.cmdline startswith "python /opt/datadog-agent" or
               sf.proc.cmdline startswith "entrypoint.sh /entrypoint.sh datadog start" or
               sf.proc.cmdline startswith "agent.py /opt/datadog-agent")
              and sf.file.path startswith "/etc/dd-agent")

- macro: rancher_writing_conf
  condition: ((sf.proc.name in (healthcheck, lb-controller, rancher-dns)) and
              (sf.container.image contains "rancher/healthcheck" or
               sf.container.image contains "rancher/lb-service-haproxy" or
               sf.container.image contains "rancher/dns") and
              (sf.file.path startswith "/etc/haproxy" or sf.file.path startswith "/etc/rancher-dns"))

- macro: rancher_writing_root
  condition: (sf.proc.name=rancher-metadat and
              (sf.container.image contains "rancher/metadata" or sf.container.image contains "rancher/lb-service-haproxy") and
              sf.file.path startswith "/answers.json")

- macro: checkpoint_writing_state
  condition: (sf.proc.name=checkpoint and
              sf.container.image contains "coreos/pod-checkpointer" and
              sf.file.path startswith "/etc/kubernetes")

- macro: jboss_in_container_writing_passwd
  condition: >
    ((sf.proc.cmdline="run-java.sh /opt/jboss/container/java/run/run-java.sh"
      or sf.proc.cmdline="run-java.sh /opt/run-java/run-java.sh")
     and container
     and sf.file.path=/etc/passwd)

- macro: curl_writing_pki_db
  condition: (sf.proc.name=curl and sf.file.directory=/etc/pki/nssdb)

- macro: haproxy_writing_conf
  condition: ((sf.proc.name in (update-haproxy-,haproxy_reload.) or sf.pproc.name in (update-haproxy-,haproxy_reload,haproxy_reload.))
               and (sf.file.path=/etc/openvpn/client.map or sf.file.path startswith /etc/haproxy))

- macro: java_writing_conf
  condition: (sf.proc.name=java and sf.file.name=/etc/.java/.systemPrefs/.system.lock)

- macro: rabbitmq_writing_conf
  condition: (sf.proc.name=rabbitmq-server and sf.file.directory=/etc/rabbitmq)

- macro: rook_writing_conf
  condition: (sf.proc.name=toolbox.sh and sf.container.image contains rook/toolbox
              and sf.file.directory=/etc/ceph)

- macro: httpd_writing_conf_logs
  condition: (sf.proc.name=httpd and sf.file.path startswith /etc/httpd/)

- macro: mysql_writing_conf
  condition: >
    ((sf.proc.name in (start-mysql.sh, run-mysqld) or sf.pproc.name=start-mysql.sh) and
     (sf.file.path startswith /etc/mysql or sf.file.directory=/etc/my.cnf.d))

- macro: redis_writing_conf
  condition: >
    (sf.proc.name in (run-redis, redis-launcher.) and (sf.file.path=/etc/redis.conf or sf.file.path startswith /etc/redis))

- macro: openvpn_writing_conf
  condition: (sf.proc.name in (openvpn,openvpn-entrypo) and sf.file.path startswith /etc/openvpn)

- macro: php_handlers_writing_conf
  condition: (sf.proc.name=php_handlers_co and sf.file.path=/etc/psa/php_versions.json)

- macro: sed_writing_temp_file
  condition: >
    ((sf.proc.aname[3]=cron_start.sh and sf.file.path startswith /etc/security/sed) or
     (sf.roc.name=sed and (sf.file.path startswith /etc/apt/sources.list.d/sed or
                         sf.file.path startswith /etc/apt/sed or
                         sf.file.path startswith /etc/apt/apt.conf.d/sed)))

- macro: cron_start_writing_pam_env
  condition: (sf.proc.cmdline="bash /usr/sbin/start-cron" and sf.file.path=/etc/security/pam_env.conf)

# In some cases dpkg-reconfigur runs commands that modify /etc. Not
# putting the full set of package management programs yet.
- macro: dpkg_scripting
  condition: (sf.proc.aname[2] in (dpkg-reconfigur, dpkg-preconfigu))

- macro: ufw_writing_conf
  condition: (sf.proc.name=ufw and sf.file.directory=/etc/ufw)

- macro: calico_writing_conf
  condition: >
    (((sf.proc.name = calico-node) or
      (sf.container.image contains projectcalico-org/node and sf.proc.name in (start_runit, cp)) or
      (sf.container.image contains projectcalico-org/cni and sf.proc.name=sed))
     and sf.file.path startswith /etc/calico)

- macro: prometheus_conf_writing_conf
  condition: (sf.proc.name=prometheus-conf and sf.file.path startswith /etc/prometheus/config_out)

- macro: openshift_writing_conf
  condition: (sf.proc.name=oc and sf.file.path startswith /etc/origin/node)

- macro: keepalived_writing_conf
  condition: (sf.proc.name in (keepalived, kube-keepalived) and sf.file.path=/etc/keepalived/keepalived.conf)

- macro: etcd_manager_updating_dns
  condition: (container and sf.proc.name=etcd-manager and sf.file.path=/etc/hosts)

- macro: automount_using_mtab
  condition: (sf.pproc.name = automount and sf.file.path startswith /etc/mtab)

- macro: mcafee_writing_cma_d
  condition: (sf.proc.name=macompatsvc and sf.file.directory=/etc/cma.d)

- macro: avinetworks_supervisor_writing_ssh
  condition: >
    (sf.proc.cmdline="se_supervisor.p /opt/avi/scripts/se_supervisor.py -d" and
      (sf.file.path startswith /etc/ssh/known_host_ or
       sf.file.path startswith /etc/ssh/ssh_monitor_config_ or
       sf.file.path startswith /etc/ssh/ssh_config_))

- macro: multipath_writing_conf
  condition: (sf.proc.name = multipath and sf.file.path startswith /etc/multipath/)

- macro: user_known_write_etc_conditions
  condition: sf.proc.name=confd

# This is a placeholder for user to extend the whitelist for write below etc rule
- macro: user_known_write_below_etc_activities
  condition: (never_true)

- macro: write_etc_common
  condition: >
    etc_dir and open_write
    and proc_name_exists
    and not sf.proc.name in (passwd_binaries, shadowutils_binaries, sysdigcloud_binaries,
                          package_mgmt_binaries, ssl_mgmt_binaries, dhcp_binaries,
                          dev_creation_binaries, shell_mgmt_binaries,
                          mail_config_binaries,
                          sshkit_script_binaries,
                          ldconfig.real, ldconfig, confd, gpg, insserv,
                          apparmor_parser, update-mime, tzdata.config, tzdata.postinst,
                          systemd, systemd-machine, systemd-sysuser,
                          debconf-show, rollerd, bind9.postinst, sv,
                          gen_resolvconf., update-ca-certi, certbot, runsv,
                          qualys-cloud-ag, locales.postins, nomachine_binaries,
                          adclient, certutil, crlutil, pam-auth-update, parallels_insta,
                          openshift-launc, update-rc.d, puppet)
    and not (container and sf.proc.cmdline in ("cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /etc/pki/ca-trust/source/anchors/openshift-ca.crt"))
    and not sf.pproc.name in (sysdigcloud_binaries, mail_config_binaries, hddtemp.postins, sshkit_script_binaries, locales.postins, deb_binaries, dhcp_binaries)
    and not sf.file.name pmatch (safe_etc_dirs)
    and not sf.file.name in (/etc/container_environment.sh, /etc/container_environment.json, /etc/motd, /etc/motd.svc)
    and not sed_temporary_file
    and not exe_running_docker_save
    and not ansible_running_python
    and not python_running_denyhosts
    and not fluentd_writing_conf_files
    and not user_known_write_etc_conditions
    and not run_by_centrify
    and not run_by_adclient
    and not qualys_writing_conf_files
    and not git_writing_nssdb
    and not plesk_writing_keys
    and not plesk_install_writing_apache_conf
    and not plesk_running_mktemp
    and not networkmanager_writing_resolv_conf
    and not run_by_chef
    and not add_shell_writing_shells_tmp
    and not duply_writing_exclude_files
    and not xmlcatalog_writing_files
    and not parent_supervise_running_multilog
    and not supervise_writing_status
    and not pki_realm_writing_realms
    and not htpasswd_writing_passwd
    and not lvprogs_writing_conf
    and not ovsdb_writing_openvswitch
    and not datadog_writing_conf
    and not curl_writing_pki_db
    and not haproxy_writing_conf
    and not java_writing_conf
    and not dpkg_scripting
    and not parent_ucf_writing_conf
    and not rabbitmq_writing_conf
    and not rook_writing_conf
    and not php_handlers_writing_conf
    and not sed_writing_temp_file
    and not cron_start_writing_pam_env
    and not httpd_writing_conf_logs
    and not mysql_writing_conf
    and not openvpn_writing_conf
    and not consul_template_writing_conf
    and not countly_writing_nginx_conf
    and not ms_oms_writing_conf
    and not ms_scx_writing_conf
    and not azure_scripts_writing_conf
    and not azure_networkwatcher_writing_conf
    and not couchdb_writing_conf
    and not update_texmf_writing_conf
    and not slapadd_writing_conf
    and not symantec_writing_conf
    and not liveupdate_writing_conf
    and not sosreport_writing_files
    and not selinux_writing_conf
    and not veritas_writing_config
    and not nginx_writing_conf
    and not nginx_writing_certs
    and not chef_client_writing_conf
    and not centrify_writing_krb
    and not sssd_writing_krb
    and not cockpit_writing_conf
    and not ipsec_writing_conf
    and not httpd_writing_ssl_conf
    and not userhelper_writing_etc_security
    and not pkgmgmt_progs_writing_pki
    and not update_ca_trust_writing_pki
    and not brandbot_writing_os_release
    and not redis_writing_conf
    and not openldap_writing_conf
    and not ucpagent_writing_conf
    and not iscsi_writing_conf
    and not istio_writing_conf
    and not ufw_writing_conf
    and not calico_writing_conf
    and not calico_writing_envvars
    and not prometheus_conf_writing_conf
    and not openshift_writing_conf
    and not keepalived_writing_conf
    and not rancher_writing_conf
    and not checkpoint_writing_state
    and not jboss_in_container_writing_passwd
    and not etcd_manager_updating_dns
    and not user_known_write_below_etc_activities
    and not automount_using_mtab
    and not mcafee_writing_cma_d
    and not avinetworks_supervisor_writing_ssh
    and not multipath_writing_conf

- macro: known_root_conditions
  condition: (sf.file.path startswith /root/orcexec.
              or sf.file.path startswith /root/.m2
              or sf.file.path startswith /root/.npm
              or sf.file.path startswith /root/.pki
              or sf.file.path startswith /root/.ivy2
              or sf.file.path startswith /root/.config/Cypress
              or sf.file.path startswith /root/.config/pulse
              or sf.file.path startswith /root/.config/configstore
              or sf.file.path startswith /root/jenkins/workspace
              or sf.file.path startswith /root/.jenkins
              or sf.file.path startswith /root/.cache
              or sf.file.path startswith /root/.sbt
              or sf.file.path startswith /root/.java
              or sf.file.path startswith /root/.glide
              or sf.file.path startswith /root/.sonar
              or sf.file.path startswith /root/.v8flag
              or sf.file.path startswith /root/infaagent
              or sf.file.path startswith /root/.local/lib/python
              or sf.file.path startswith /root/.pm2
              or sf.file.path startswith /root/.gnupg
              or sf.file.path startswith /root/.pgpass
              or sf.file.path startswith /root/.theano
              or sf.file.path startswith /root/.gradle
              or sf.file.path startswith /root/.android
              or sf.file.path startswith /root/.ansible
              or sf.file.path startswith /root/.crashlytics
              or sf.file.path startswith /root/.dbus
              or sf.file.path startswith /root/.composer
              or sf.file.path startswith /root/.gconf
              or sf.file.path startswith /root/.nv
              or sf.file.path startswith /root/.local/share/jupyter
              or sf.file.path startswith /root/oradiag_root
              or sf.file.path startswith /root/workspace
              or sf.file.path startswith /root/jvm
              or sf.file.path startswith /root/.node-gyp)

# In this file, it just takes one of the condition in the base macro
# and repeats it.
- macro: user_known_write_root_conditions
  condition: sf.file.path=/root/.bash_history

# This is a placeholder for user to extend the whitelist for write below root rule
- macro: user_known_write_below_root_activities
  condition: (never_true)

- macro: runc_writing_exec_fifo
  condition: (sf.proc.cmdline="runc:[1:CHILD] init" and sf.file.path=/exec.fifo)

- macro: runc_writing_var_lib_docker
  condition: (sf.proc.cmdline="runc:[1:CHILD] init" and evt.arg.filename startswith /var/lib/docker)

- macro: mysqlsh_writing_state
  condition: (sf.proc.name=mysqlsh and sf.file.directory=/root/.mysqlsh)

# mv操作改写 2022.5.13
- macro: openwrite_or_rename
  condition: (open_write or rename)

- macro: cmp_cp_by_passwd
  condition: sf.proc.name in (cmp, cp) and sf.pproc.name in (passwd, run-parts)

- macro: user_known_read_sensitive_files_activities
  condition: (never_true)

- macro: user_read_sensitive_file_conditions
  condition: cmp_cp_by_passwd

- macro: user_read_sensitive_file_containers
  condition: (container and sf.container.image pmatch (read_sensitive_file_images))

- macro: mandb_postinst
  condition: >
    (sf.proc.name=perl and sf.proc.args startswith "-e" and
    sf.proc.args contains "@pwd = getpwnam(" and
    sf.proc.args contains "exec " and
    sf.proc.args contains "/usr/bin/mandb")

- macro: amazon_linux_running_python_yum
  condition: >
    (sf.proc.name = python and
     sf.pproc.cmdline = "python -m amazon_linux_extras system_motd" and
     sf.proc.cmdline startswith "python -c import yum;")

- macro: user_known_write_rpm_database_activities
  condition: (never_true)

- macro: postgres_running_wal_e
  condition: (sf.pproc.name=postgres and sf.proc.cmdline startswith "sh -c envdir /etc/wal-e.d/env /usr/local/bin/wal-e")

- macro: redis_running_prepost_scripts
  condition: (proc.aname[2]=redis-server and (proc.cmdline contains "redis-server.post-up.d" or proc.cmdline contains "redis-server.pre-up.d"))

- macro: rabbitmq_running_scripts
  condition: >
    (sf.pproc.name=beam.smp and
    (sf.proc.cmdline startswith "sh -c exec ps" or
     sf.proc.cmdline startswith "sh -c exec inet_gethost" or
     sf.proc.cmdline= "sh -s unix:cmd" or
     sf.proc.cmdline= "sh -c exec /bin/sh -s unix:cmd 2>&1"))

- macro: rabbitmqctl_running_scripts
  condition: (sf.proc.aname[2]=rabbitmqctl and sf.proc.cmdline startswith "sh -c ")

- macro: run_by_appdynamics
  condition: (sf.pproc.name=java and sf.pproc.cmdline startswith "java -jar -Dappdynamics")

- macro: user_known_db_spawned_processes
  condition: (never_true)

- macro: user_known_modify_bin_dir_activities
  condition: (never_true)

- macro: user_known_mkdir_bin_dir_activities
  condition: (never_true)

- macro: user_known_change_thread_namespace_activities
  condition: (never_true)

- macro: calico_node
  condition: (sf.container.image contains calico/node and sf.proc.name=calico-node)

- macro: weaveworks_scope
  condition: (sf.container.image contains weaveworks/scope and sf.proc.name=scope)

- macro: parent_java_running_zookeeper
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.apache.zookeeper.server)

- macro: parent_java_running_kafka
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains kafka.Kafka)

- macro: parent_java_running_elasticsearch
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.elasticsearch.bootstrap.Elasticsearch)

- macro: parent_java_running_activemq
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains activemq.jar)

- macro: parent_java_running_cassandra
  condition: (sf.pproc.name=java and (sf.pproc.cmdline contains "-Dcassandra.config.loader" or sf.pproc.cmdline contains org.apache.cassandra.service.CassandraDaemon))

- macro: parent_java_running_jboss_wildfly
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.jboss)

- macro: parent_java_running_glassfish
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains com.sun.enterprise.glassfish)

- macro: parent_java_running_hadoop
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains org.apache.hadoop)

- macro: parent_java_running_datastax
  condition: (sf.pproc.name=java and sf.pproc.cmdline contains com.datastax)

- macro: nginx_starting_nginx
  condition: (sf.pproc.name=nginx and sf.proc.cmdline contains "/usr/sbin/nginx -c /etc/nginx/nginx.conf")

- macro: nginx_running_aws_s3_cp
  condition: (sf.pproc.name=nginx and sf.proc.cmdline startswith "sh -c /usr/local/bin/aws s3 cp")

- macro: consul_running_net_scripts
  condition: (sf.pproc.name=consul and (sf.proc.cmdline startswith "sh -c curl" or sf.proc.cmdline startswith "sh -c nc"))

- macro: consul_running_alert_checks
  condition: (sf.pproc.name=consul and sf.proc.cmdline startswith "sh -c /bin/consul-alerts")

- macro: serf_script
  condition: (sf.proc.cmdline startswith "sh -c serf")

- macro: check_process_status
  condition: (sf.proc.cmdline startswith "sh -c kill -0 ")

- macro: possibly_node_in_container
  condition: (never_true and (sf.pproc.name=node and sf.proc.aname[3]=docker-containe))

- macro: possibly_parent_java_running_tomcat
  condition: (never_true and sf.pproc.name=java and sf.pproc.cmdline contains org.apache.catalina.startup.Bootstrap)

- macro: protected_shell_spawner
  condition: >
    (sf.proc.aname in (protected_shell_spawning_binaries)
    or parent_java_running_zookeeper
    or parent_java_running_kafka
    or parent_java_running_elasticsearch
    or parent_java_running_activemq
    or parent_java_running_cassandra
    or parent_java_running_jboss_wildfly
    or parent_java_running_glassfish
    or parent_java_running_hadoop
    or parent_java_running_datastax
    or possibly_parent_java_running_tomcat
    or possibly_node_in_container)

- macro: allowed_openshift_registry_root
  condition: >
    (sf.container.image contains openshift3/ or
     sf.container.image contains registry.redhat.io/openshift3/ or
     sf.container.image contains registry.access.redhat.com/openshift3/)

# Source: https://docs.openshift.com/enterprise/3.2/install_config/install/disconnected_install.html
- macro: openshift_image
  condition: >
    (allowed_openshift_registry_root and
      (sf.container.image contains /logging-deployment or
       sf.container.image contains /logging-elasticsearch or
       sf.container.image contains /logging-kibana or
       sf.container.image contains /logging-fluentd or
       sf.container.image contains /logging-auth-proxy or
       sf.container.image contains /metrics-deployer or
       sf.container.image contains /metrics-hawkular-metrics or
       sf.container.image contains /metrics-cassandra or
       sf.container.image contains /metrics-heapster or
       sf.container.image contains /ose-haproxy-router or
       sf.container.image contains /ose-deployer or
       sf.container.image contains /ose-sti-builder or
       sf.container.image contains /ose-docker-builder or
       sf.container.image contains /ose-pod or
       sf.container.image contains /ose-node or
       sf.container.image contains /ose-docker-registry or
       sf.container.image contains /prometheus-node-exporter or
       sf.container.image contains /image-inspector))

- macro: allowed_aws_ecr_registry_root_for_eks
  condition: >
    (sf.container.image startswith "602401143452.dkr.ecr" or
     sf.container.image startswith "877085696533.dkr.ecr" or
     sf.container.image startswith "800184023465.dkr.ecr" or
     sf.container.image startswith "918309763551.dkr.ecr" or
     sf.container.image startswith "961992271922.dkr.ecr" or
     sf.container.image startswith "590381155156.dkr.ecr" or
     sf.container.image startswith "558608220178.dkr.ecr" or
     sf.container.image startswith "151742754352.dkr.ecr" or
     sf.container.image startswith "013241004608.dkr.ecr")

- macro: aws_eks_core_images
  condition: >
    (allowed_aws_ecr_registry_root_for_eks and
    (sf.container.image contains "amazon-k8s-cni" or
     sf.container.image contains "eks/kube-proxy"))

- macro: calico_writing_state
  condition: (sf.proc.name=kube-controller and sf.file.path startswith /status.json and sf.container.imags contains calico)

- macro: aws_eks_image_sensitive_mount
  condition: >
    (allowed_aws_ecr_registry_root_for_eks and sf.container.image contains "amazon-k8s-cni")

- macro: user_trusted_containers
  condition: (never_true)

- macro: sematext_images_macro
  condition: (sf.continer.image contains sematext/sematext-agent-docker or
              sf.continer.image contains sematext/agent or
              sf.continer.image contains sematext/logagent)

- macro: sysflow_privileged_containers_macro
  condition:  sf.container.image startswith sysflowtelemetry/

- macro: falco_privileged_images_macro
  condition: (sf.continer.image contains calico/node or
              sf.continer.image contains cloudnativelabs/kube-router or
              sf.continer.image contains docker/ucp-agent or
              sf.continer.image contains falcosecurity/falco or
              sf.continer.image contains mesosphere/mesos-slave or
              sf.continer.image contains rook/toolbox or
              sf.continer.image contains sysdig/falco or
              sf.continer.image contains sysdig/sysdig or
              sf.continer.image contains falcosecurity/falco or
              sf.continer.image contains google_containers/kube-proxy or
              sf.continer.image contains google-containers/startup-script or
              sf.continer.image contains projectcalico-org/node or
              sf.continer.image contains kube-proxy or
              sf.continer.image contains gke-metadata-server or
              sf.continer.image contains netd-amd64 or
              sf.continer.image contains google-containers/prometheus-to-sd or
              sf.continer.image contains ip-masq-agent-amd64 or
              sf.continer.image contains kube-proxy or
              sf.continer.image contains prometheus-to-sd or
              sf.continer.image contains calico/node or
              sf.continer.image contains sysdig/falco or
              sf.continer.image contains sysdig/sysdig or
              sematext_images_macro or sysflow_privileged_containers_macro)

- macro: falco_privileged_containers
  condition: (openshift_image or
              user_trusted_containers or
              aws_eks_core_images or
              sf.container.image pmatch (trusted_images) or
              falco_privileged_images_macro or
              sf.container.image startswith proxy_ or
              sf.container.image startswith sysdig/)

- macro: user_privileged_containers
  condition: (never_true)

- macro: falco_sensitive_mount_containers
  condition: (user_trusted_containers or
              aws_eks_image_sensitive_mount or
              sf.container.image in (trusted_images) or
              sf.container.image in (falco_sensitive_mount_images) or
              sf.container.image startswith sysdig/)

- macro: user_sensitive_mount_containers
  condition: (never_true)

# - macro: sensitive_mount
#   condition: (container.mount.dest[/proc*] != "N/A" or
#               container.mount.dest[/var/run/docker.sock] != "N/A" or
#               container.mount.dest[/var/run/crio/crio.sock] != "N/A" or
#               container.mount.dest[/run/containerd/containerd.sock] != "N/A" or
#               container.mount.dest[/var/lib/kubelet] != "N/A" or
#               container.mount.dest[/var/lib/kubelet/pki] != "N/A" or
#               container.mount.dest[/] != "N/A" or
#               container.mount.dest[/home/admin] != "N/A" or
#               container.mount.dest[/etc] != "N/A" or
#               container.mount.dest[/etc/kubernetes] != "N/A" or
#               container.mount.dest[/etc/kubernetes/manifests] != "N/A" or
#               container.mount.dest[/root*] != "N/A")

- macro: container_entrypoint
  condition: (not sf.pproc.name exists or sf.pproc.name in (runc:[0:PARENT], runc:[1:CHILD], runc, docker-runc, exe, docker-runc-cur))

- macro: allowed_containers
  condition: (sf.container.id exists)

- macro: user_known_system_user_login
  condition: (never_true)

- macro: user_expected_terminal_shell_in_container_conditions
  condition: (never_true)

- macro: user_shell_container_exclusions
  condition: (never_true)

- macro: login_doing_dns_lookup
  condition: (sf.proc.name=login and sf.net.proto=17 and sf.net.sport=53)

- macro: user_expected_system_procs_network_activity_conditions
  condition: (never_true)

- macro: allowed_ssh_proxy_env
  condition: (always_true)

- macro: http_proxy_procs
  condition: (sf.proc.name in (http_proxy_binaries))

- macro: consider_interpreted_inbound
  condition: (never_true)

- macro: consider_interpreted_outbound
  condition: (never_true)

- macro: do_unexpected_udp_check
  condition: (never_true)

- macro: expected_udp_traffic
  condition: (sf.net.sport in (expected_udp_ports)) or (sf.net.dport in (expected_udp_ports))

- macro: somebody_becoming_themselves
  condition: ((sf.proc.user=nobody) or
              (sf.proc.user=www-data) or
              (sf.proc.user=_apt) or
              (sf.proc.user=postfix) or
              (sf.proc.user=pki-agent) or
              (sf.proc.user=pki-acme) or
              (sf.proc.user=nfsnobody) or
              (sf.proc.user=postgres))

- macro: nrpe_becoming_nagios
  condition: (sf.proc.name=nrpe)

- macro: known_user_in_container
  condition: (container and sf.proc.user != "")

- macro: user_known_non_sudo_setuid_conditions
  condition: sf.proc.user=root

- macro: user_known_user_management_activities
  condition: (never_true)

- macro: chage_list
  condition: (sf.proc.name=chage and (sf.proc.cmdline contains "-l" or sf.proc.cmdline contains "--list"))

- macro: user_known_create_files_below_dev_activities
  condition: (never_true)

- macro: ec2_metadata_containers
  condition: container

- macro: consider_metadata_access
  condition: (never_true)

- macro: user_known_metadata_access
  condition: (sf.container.name contains "kube-system")

- macro: k8s_containers
  condition: >
    ((sf.container.image startswith google_containers/hyperkube-amd64) or
     (sf.container.image startswith google_containers/kube2sky) or
     (sf.container.image startswith sysdig/sysdig) or
     (sf.container.image startswith falcosecurity/falco) or
     (sf.container.image startswith sysdig/sysdig) or
     (sf.container.image startswith falcosecurity/falco) or
     (sf.container.image startswith fluent/fluentd-kubernetes-daemonset) or
     (sf.container.image startswith prom/prometheus) or
     (sf.container.image startswith ibm_cloud_containers) or
     (sf.container.image startswith falcosecurity/falco) or
     (sf.container.name contains "kube-system"))

- macro: k8s_api_server
  # condition: (fd.sip.name="kubernetes.default.svc.cluster.local")
  condition: (sf.container.name contains "k8s-apiserver")

- macro: user_known_contact_k8s_api_server_activities
  condition: (never_true)

- macro: nodeport_containers
  condition: container

- macro: network_tool_procs
  condition: (sf.proc.name in (network_tool_binaries))

# - macro: user_known_package_manager_in_container
#   condition: proc.cmdline="dpkg -l"
- macro: user_known_package_manager_in_container
  condition: (never_true)

- macro: user_known_network_tool_activities
  condition: (never_true)

- macro: consider_network_tools_on_host
  condition: (never_true)

- macro: grep_commands
  condition: (sf.proc.name in (grep_binaries))

# a less restrictive search for things that might be passwords/ssh/user etc.
- macro: grep_more
  condition: (never_true)

- macro: private_key_or_password
  condition: >
    (sf.proc.args icontains "BEGIN PRIVATE" or
     sf.proc.args icontains "BEGIN RSA PRIVATE" or
     psf.roc.args icontains "BEGIN DSA PRIVATE" or
     sf.proc.args icontains "BEGIN EC PRIVATE" or
     (grep_more and
      (sf.proc.args icontains " pass " or
       sf.proc.args icontains " ssh " or
       sf.proc.args icontains " user "))
    )

- macro: access_log_files
  condition: (sf.file.directory in (log_directories) or sf.file.name in (log_files))

# a placeholder for whitelist log files that could be cleared. Recommend the macro as (fd.name startswith "/var/log/app1*")
- macro: allowed_clear_log_files
  condition: (never_true)

- macro: trusted_logging_images
  condition: (sf.container.image contains "splunk/fluentd-hec" or
              sf.container.image contains "fluent/fluentd-kubernetes-daemonset" or
              sf.container.image contains "openshift3/ose-logging-fluentd" or
              sf.container.image contains "containernetworking/azure-npm")

- macro: clear_data_procs
  condition: (sf.proc.name in (data_remove_commands))

- macro: user_known_remove_data_activities
  condition: (never_true)

- macro: modify_shell_history
  condition: >
    (modify and (
      sf.proc.args contains "bash_history" or
      sf.proc.args endswith "zsh_history" or
      sf.proc.args contains "fish_read_history" or
      sf.proc.args endswith "fish_history" or
      sf.file.directory contains "bash_history" or
      sf.file.directory endswith "zsh_history" or
      sf.file.directory contains "fish_read_history" or
      sf.file.directory endswith "fish_history" or
      sf.file.path contains "bash_history" or
      sf.file.path endswith "zsh_history" or
      sf.file.path contains "fish_read_history" or
      sf.file.path endswith "fish_history"))

- macro: truncate_shell_history
  condition: >
    (open_write and (
      sf.file.path contains "bash_history" or
      sf.file.path endswith "zsh_history" or
      sf.file.path contains "fish_read_history" or
      sf.file.path endswith "fish_history") and sf.opflags contains "O_TRUNC")

- macro: var_lib_docker_filepath
  condition: (sf.proc.agrs startswith /var/lib/docker or sf.file.path startswith /var/lib/docker)

- macro: consider_all_chmods
  condition: (always_true)

- macro: consider_all_outbound_conns
  condition: (never_true)

- macro: user_known_set_setuid_or_setgid_bit_conditions
  condition: (never_true)

- macro: consider_hidden_file_creation
  condition: (never_true)

- macro: user_known_create_hidden_file_activities
  condition: (never_true)

- macro: remote_file_copy_procs
  condition: (sf.proc.name in (remote_file_copy_binaries))

- macro: user_known_remote_file_copy_activities
  condition: (never_true)

# Add rule based on crypto mining IOCs
- macro: minerpool_https
  # condition: (sf.net.sport="443" and fd.sip.name in (https_miner_domains))
  condition: (sf.net.sport="443")

- macro: minerpool_http
  # condition: (fd.sport="80" and fd.sip.name in (http_miner_domains))
  condition: (sf.net.sport="80")

- macro: minerpool_other
  # condition: (fd.sport in (miner_ports) and fd.sip.name in (miner_domains))
  condition: (sf.net.sport in (miner_ports))

- macro: net_miner_pool
  condition: (sf.opfalgs in (sendto, sendmsg) and (sf.net exists and sf.net.dip != "127.0.0.0/8" and not sf.net.sip in (rfc_1918_addresses)) and ((minerpool_http) or (minerpool_https) or (minerpool_other)))

- macro: trusted_images_query_miner_domain_dns
  # condition: (sf.container.image in (docker.io/falcosecurity/falco, falcosecurity/falco, public.ecr.aws/falcosecurity/falco))
  condition: sf.container.image contains falcosecurity/falco
  # append: false

# Whitelist for known docker client binaries run inside container
# - k8s.gcr.io/fluentd-gcp-scaler in GCP/GKE
- macro: user_known_k8s_client_container
  condition: >
    (sf.container.name contains "kube-system" and sf.container.image pmatch (user_known_k8s_ns_kube_system_images)) or sf.container.image pmatch (user_known_k8s_images)

- macro: user_known_k8s_client_container_parens
  condition: (user_known_k8s_client_container)

- macro: consider_packet_socket_communication
  condition: (always_true)

- macro: enabled_rule_network_only_subnet
  condition: (never_true)

- macro: network_local_subnet
  condition: >
    (sf.net.dip in (rfc_1918_addresses)) or
    (sf.net.sip = "0.0.0.0") or (sf.net.dip = "0.0.0.0") or
    (sf.net.sip = "127.0.0.0/8") or (sf.net.dip = "127.0.0.0/8")

- macro: allowed_port
  condition: (never_true)

- macro: user_known_stand_streams_redirect_activities
  condition: (never_true)

- macro: user_known_container_drift_activities
  condition: (always_true)

- macro: user_known_run_as_root_container
  condition: (sf.container.image pmatch (run_as_root_image_list))

- macro: mount_info
  condition: ((sf.proc.args="") or (sf.proc.args contains "-V" or
              sf.proc.args contains "-l" or 
              sf.proc.args contains "-h" or
              sf.proc.args contains "-v"))

- macro: consider_userfaultfd_activities
  condition: (always_true)

-  macro: curl_download
   condition: sf.proc.name = curl and
              (sf.proc.cmdline contains " > " or
              sf.proc.cmdline contains " >> " or
              sf.proc.cmdline contains " | " or
              sf.proc.cmdline contains " -o " or
              sf.proc.cmdline contains " --output " or
              sf.proc.cmdline contains " -O " or
              sf.proc.cmdline contains " --remote-name ")

- macro: ingress_remote_file_copy_procs
  condition: (sf.proc.name in (ingress_remote_file_copy_binaries))

- macro: user_known_ingress_remote_file_copy_activities
  condition: (never_true)

